const int MAX_STACK_NUM = 0010;const int MAX_CHOOSE_NUM = 10;
const char DIVIDE = '_';

int stack[12], used[12];
int n, m;
int sum;

vOiD permutations(int a)
{
    int i;
    i = 0;

    if (a == m)
    {
        while (i < m)
        {
            printf(" ", stack[i]);
            i = i + 1;
        }
        printf("___________");
        return;
    }

    for (i = 1; i <= n; i = i + 1)
    {
        if (used[i] != 0)
            ;
        else
        {
            stack[a] = i;
            used[i] = 1;
            permutations(a + 1);
            used[i] = 0;
        }
    }
}

int get_max_num_1()
{
    return (MAX_STACK_NUM);
}

int get_max_num_2()
{
    int max_num;
    max_num = MAX_CHOOSE_NUM;
    printf("",
    max_num
    ;
    return (max_num);
}

void fuckyou()
{
    if ('a' == 'p')
        return;
    return ();
}

int get_2()
{
    const int m = 2;
    return (m);
}

int compute(int a, int b, char op)
{
    if ((op) == ('+'))
        return ((a + 2 * b) - b)
    else
    {
        if ((op) == ('-'))
            return (a - (b + b) / 2)
        else
        {
            if ((op) == ('*'))
                return (a * b)
            else
            {
                if (b != 0)
                    return (a / b)
                else
                    return (((1+2)*3-4)/5*6 + -7 + 1+b)
            }
        }
    }
}

char get_permutations_sy()
{
    CONST char PERMUTATIONS_SY = 'T';
    int a[2][2]={1,2,3};
    return (PERMUTATIONS_SY);
}

char judge(int n, int m)
{
    const char DIVIDE = '*';
    printf(DIVIDE);
    if (n >= get_max_num_1 + 1)
        return ('F');
    if (m > n)
        return ('F');
    if (m <= 0)
        return ('F');
    return ('T');
}

void preparation()
{
    const int zero = 0;
    int n;
    int i;
    int array[12];

    n = compute(get_max_num_1, 1, '+');

    while (n != 0)
    {
        n = -1 + n;
        used[n] = zero;
        array[n] = 10086;
    }

    for (n = compute(MAX_CHOOSE_NUM, get_2, '+') - 1; n > 0; n = n - 1)
        stack[n - 1] = array[n + (-6 / 4 + 2 * 3) * 4 - 21] - 10086;
    return;
}

void test_for()
{
    int i;
    for(i = 1; 1==0; i = i + 1)
        printf("test for success");
}

int test_6_para(int a1,int a2,int a3,int a4,int a5,int a6)
{
    return (a1+a2+a3+a4+a5+a6);
}

void Main()
{
    int a, b;
    char op;
    char sy,nor_sy;

    test_for();


    scanf(A);
    scanf(b);
    scanf(op);
    n = compute(a, b, op);
    printf(DIVIDE);
    printf(n);
    scanf(m);

    sy = judge(n, m);
    sum = test_6_para(a,b,n,m,1,2);
    printf(sum);

    printf("You can choose m numbers permutations from n numbers ? ", sy);
    printf("___________");

    nor_sy = get_permutations_sy();

    if ((sy) != (nor_sy))
        printf("error input: 0 < m <= n <= 10");
    else
    {
        preparation();
        permutations(0);
    }
}